using MassTransit;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using OrderService.Consumers;
using OrderService.Data;
using OrderService.Middleware;
using OrderService.Repositories;
using OrderService.Services;
using Serilog;
using Serilog.Events;

var builder = WebApplication.CreateBuilder(args);

Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
    .Enrich.WithProperty("Application", "IdentityService")
    .CreateLogger();

builder.Host.UseSerilog();

builder.Services.AddDbContext<OrderDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IOrderRepository, OrderRepository>();
builder.Services.AddScoped<IOrderService, OrderService.Services.OrderService>();

builder.Services.AddHttpClient();

builder.Services.AddMassTransit(busConfigurator =>
{
    busConfigurator.SetKebabCaseEndpointNameFormatter();
    busConfigurator.AddConsumer<PaymentProcessedEventConsumer>();
    busConfigurator.UsingRabbitMq((context, configurator) =>
    {
        configurator.Host(new Uri(builder.Configuration["MessageBroker:Host"]!), h =>
        {
            h.Username(builder.Configuration["MessageBroker:Username"]);
            h.Password(builder.Configuration["MessageBroker:Password"]);
        });
        configurator.ReceiveEndpoint("order-service-queue",
            e => { e.ConfigureConsumer<PaymentProcessedEventConsumer>(context); });
        configurator.ConfigureEndpoints(context);
    });
});


builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Order API", Version = "v1" });

    // Add API key and secret as global headers in Swagger
    c.AddSecurityDefinition("ApiKey", new OpenApiSecurityScheme
    {
        Description = "API Key needed to access the endpoints. X-Api-Key: Your_API_Key",
        In = ParameterLocation.Header,
        Name = "X-Api-Key",
        Type = SecuritySchemeType.ApiKey
    });

    c.AddSecurityDefinition("ApiSecret", new OpenApiSecurityScheme
    {
        Description = "API Secret needed to access the endpoints. X-Api-Secret: Your_API_Secret",
        In = ParameterLocation.Header,
        Name = "X-Api-Secret",
        Type = SecuritySchemeType.ApiKey
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "ApiKey" }
            },
            new List<string>()
        },
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "ApiSecret" }
            },
            new List<string>()
        }
    });
});


builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Configure Logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();

// Configure CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("DefaultCorsPolicy", policy =>
    {
        policy.AllowAnyOrigin()
            .AllowAnyMethod()
            .AllowAnyHeader();
    });
});

builder.Services.AddMemoryCache();

var app = builder.Build();

using (var scope = app.Services.CreateScope())
{
    try
    {
        var dbContext = scope.ServiceProvider.GetRequiredService<OrderDbContext>();
        await dbContext.Database.MigrateAsync();
    }
    catch (Exception ex)
    {
        Log.Fatal(ex, "An error occurred while migrating the database.");
        throw;
    }
}


// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseMiddleware<ExceptionHandlingMiddleware>();
app.UseCors("DefaultCorsPolicy");
app.UseMiddleware<AuthMiddleware>();

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();﻿using MassTransit;
using OrderService.Models;
using OrderService.Repositories;
using Shared.Events.Payment;

namespace OrderService.Consumers;

public class PaymentProcessedEventConsumer(
    IOrderRepository orderRepository,
    ILogger<PaymentProcessedEventConsumer> logger)
    : IConsumer<PaymentProcessedEvent>
{
    public async Task Consume(ConsumeContext<PaymentProcessedEvent> context)
    {
        try
        {
            var message = context.Message;
            logger.LogInformation("Received PaymentProcessedEvent for OrderId: {OrderId} with Status: {Status}",
                message.OrderId, message.Status);

            var order = await orderRepository.GetOrderByIdAsync(message.OrderId);

            if (order == null)
            {
                logger.LogWarning("Order with ID {OrderId} not found.", message.OrderId);
                return;
            }

            // Update the order status based on the payment status
            order.Status = message.Status == PaymentStatus.Completed ? OrderStatus.Completed : OrderStatus.Rejected;

            await orderRepository.UpdateOrderAsync(order);

            logger.LogInformation("Order ID {OrderId} updated to status {Status}.", order.OrderId, order.Status);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error processing PaymentProcessedEvent for OrderId: {OrderId}",
                context.Message.OrderId);
            // Optionally, implement retry logic or move to a dead-letter queue
            throw;
        }
    }
}﻿using Microsoft.AspNetCore.Mvc;
using OrderService.DTO;
using OrderService.Models;
using OrderService.Services;

namespace OrderService.Controllers;

[ApiController]
[Route("api/[controller]")]
public class OrderController(IOrderService orderService) : ControllerBase
{
    [HttpPost]
    public async Task<IActionResult> CreateOrder([FromBody] CreateOrderDto dto)
    {
        try
        {
            var order = await orderService.CreateOrderAsync(dto.CompanyId, dto.Amount, dto.Currency);
            return CreatedAtAction(nameof(GetOrderById), new { id = order.OrderId }, order);
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }
    }

    [HttpGet("{orderId:guid}")]
    public async Task<ActionResult<Order>> GetOrderById(Guid orderId)
    {
        var order = await orderService.GetOrderByIdAsync(orderId);
        if (order == null) return NotFound();
        return Ok(order);
    }

    [HttpGet("company/{companyId:guid}")]
    public async Task<IActionResult> GetOrdersByCompanyId(Guid companyId)
    {
        var orders = await orderService.GetOrdersByCompanyIdAsync(companyId);
        return Ok(orders);
    }

    [HttpGet("compute/{companyId:guid}")]
    public async Task<IActionResult> ComputeTotalOrders(Guid companyId)
    {
        var total = await orderService.ComputeTotalOrdersAsync(companyId);
        return Ok(new { total });
    }
    
    [HttpGet("{orderId:guid}/exists")]
    public async Task<IActionResult> OrderExists(Guid orderId, [FromQuery] Guid companyId)
    {
        if (orderId == Guid.Empty || companyId == Guid.Empty)
        {
            return BadRequest(new { error = "OrderId or CompanyId is missing or invalid." });
        }

        var order = await orderService.GetOrderByIdAsync(orderId);
        if (order == null || order.CompanyId != companyId)
        {
            return Ok(new { exists = false });
        }

        return Ok(new { exists = true });
    }
}﻿using Microsoft.EntityFrameworkCore;
using OrderService.Models;

namespace OrderService.Data;

public class OrderDbContext(DbContextOptions<OrderDbContext> options) : DbContext(options)
{
    public DbSet<Order> Orders { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(o => o.OrderId);

            entity.Property(o => o.CompanyId)
                .IsRequired();

            entity.Property(o => o.Amount)
                .HasColumnType("decimal(18,2)")
                .IsRequired();

            entity.Property(o => o.Currency)
                .IsRequired()
                .HasMaxLength(10);

            entity.Property(o => o.Status)
                .IsRequired();

            entity.Property(o => o.CreatedAt)
                .IsRequired();

            // Optional: Add indexes for frequently queried fields
            entity.HasIndex(o => o.CompanyId);
            entity.HasIndex(o => o.Status);
        });
    }
}﻿using System.ComponentModel.DataAnnotations;

namespace OrderService.DTO;

public class CreateOrderDto
{
    [Required] public Guid CompanyId { get; set; }

    [Required]
    [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than zero.")]
    public decimal Amount { get; set; }

    [Required]
    [StringLength(10, ErrorMessage = "Currency code cannot exceed 10 characters.")]
    public string Currency { get; set; }
}﻿// using Microsoft.Extensions.Caching.Memory;
// using System.Text.Json;
// using System.Text;
// using OrderService.DTO;
//
// namespace OrderService.Middleware
// {
//     public class AuthMiddleware(
//         RequestDelegate next,
//         IHttpClientFactory httpClientFactory,
//         ILogger<AuthMiddleware> logger,
//         IConfiguration configuration,
//         IMemoryCache cache)
//     {
//         private const int CacheDurationMinutes = 5;
//         private const string MissingHeadersError = "Unauthorized: Missing API Key or Secret";
//         private const string InvalidJsonError = "Invalid JSON format";
//         private const string InvalidCompanyIdError = "Missing or invalid CompanyId";
//         private const string InternalServerError = "Internal Server Error";
//         private const string UnauthorizedError = "Unauthorized: Identity validation failed";
//
//         public async Task InvokeAsync(HttpContext context)
//         {
//             if (!ValidateHeaders(context, out var apiKey, out var apiSecret))
//             {
//                 await RespondWithError(context, StatusCodes.Status401Unauthorized, MissingHeadersError);
//                 return;
//             }
//
//             var dto = await ParseRequestBody<CreateOrderDto>(context);
//             if (dto == null || dto.CompanyId == Guid.Empty)
//             {
//                 await RespondWithError(context, StatusCodes.Status400BadRequest, InvalidCompanyIdError);
//                 return;
//             }
//
//             var cacheKey = $"{apiKey}:{apiSecret}:{dto.CompanyId}";
//             if (!cache.TryGetValue(cacheKey, out bool isValid) || !isValid)
//             {
//                 isValid = await ValidateWithIdentityService(apiKey, apiSecret, dto.CompanyId, context);
//                 if (!isValid)
//                 {
//                     await RespondWithError(context, StatusCodes.Status401Unauthorized, UnauthorizedError);
//                     return;
//                 }
//
//                 cache.Set(cacheKey, true, TimeSpan.FromMinutes(CacheDurationMinutes));
//             }
//
//             await next(context);
//         }
//
//         private bool ValidateHeaders(HttpContext context, out string apiKey, out string apiSecret)
//         {
//             // Initialize out parameters
//             apiKey = string.Empty;
//             apiSecret = string.Empty;
//
//             if (context.Request.Headers.TryGetValue("X-Api-Key", out var apiKeyValues) &&
//                 context.Request.Headers.TryGetValue("X-Api-Secret", out var apiSecretValues))
//             {
//                 apiKey = apiKeyValues.ToString();
//                 apiSecret = apiSecretValues.ToString();
//                 return true;
//             }
//
//             return false;
//         }
//
//
//         private async Task<T?> ParseRequestBody<T>(HttpContext context)
//         {
//             try
//             {
//                 context.Request.EnableBuffering();
//                 using var reader = new StreamReader(context.Request.Body, Encoding.UTF8, leaveOpen: true);
//                 var body = await reader.ReadToEndAsync();
//                 context.Request.Body.Position = 0;
//                 
//                 return JsonSerializer.Deserialize<T>(body, new JsonSerializerOptions
//                 {
//                     PropertyNameCaseInsensitive = true
//                 });
//             }
//             catch (JsonException ex)
//             {
//                 logger.LogWarning(ex, InvalidJsonError);
//                 return default;
//             }
//         }
//
//         private async Task<bool> ValidateWithIdentityService(string apiKey, string apiSecret, Guid companyId, HttpContext context)
//         {
//             var identityServiceUrl = configuration["IdentityService:ValidateUrl"];
//             if (string.IsNullOrEmpty(identityServiceUrl))
//             {
//                 logger.LogError("IdentityService:ValidateUrl is not configured.");
//                 await RespondWithError(context, StatusCodes.Status500InternalServerError, InternalServerError);
//                 return false;
//             }
//
//             var client = httpClientFactory.CreateClient();
//             try
//             {
//                 var response = await client.GetAsync($"{identityServiceUrl}/Companies/{companyId}");
//                 if (!response.IsSuccessStatusCode) return false;
//
//                 var responseBody = await response.Content.ReadAsStringAsync();
//                 var identityResponse = JsonSerializer.Deserialize<IdentityResponse>(responseBody, 
//                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
//
//                 return identityResponse != null && 
//                        identityResponse.ApiKey == apiKey && 
//                        identityResponse.ApiSecret == apiSecret;
//             }
//             catch (Exception ex)
//             {
//                 logger.LogError(ex, "Error during request to Identity Service");
//                 await RespondWithError(context, StatusCodes.Status500InternalServerError, InternalServerError);
//                 return false;
//             }
//         }
//
//         private async Task RespondWithError(HttpContext context, int statusCode, string errorMessage)
//         {
//             context.Response.StatusCode = statusCode;
//             await context.Response.WriteAsJsonAsync(new { error = errorMessage });
//         }
//     }
// }

using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using Microsoft.Extensions.Caching.Memory;
using OrderService.DTO;

namespace OrderService.Middleware;

public class AuthMiddleware
{
    private const int CacheDurationMinutes = 5;

    private const string MissingHeadersError = "Unauthorized: Missing API Key or Secret";
    private const string InvalidJsonError = "Invalid JSON format";
    private const string InvalidCompanyIdError = "Missing or invalid CompanyId";
    private const string InternalServerError = "Internal Server Error";
    private const string UnauthorizedError = "Unauthorized: Identity validation failed";
    private readonly IMemoryCache _cache;
    private readonly IConfiguration _configuration;
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly ILogger<AuthMiddleware> _logger;
    private readonly RequestDelegate _next;

    public AuthMiddleware(
        RequestDelegate next,
        IHttpClientFactory httpClientFactory,
        ILogger<AuthMiddleware> logger,
        IConfiguration configuration,
        IMemoryCache cache)
    {
        _next = next;
        _httpClientFactory = httpClientFactory;
        _logger = logger;
        _configuration = configuration;
        _cache = cache;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Check if the request is for the CreateOrder endpoint
        if (IsCreateOrderRequest(context))
        {
            if (!ValidateHeaders(context, out var apiKey, out var apiSecret))
            {
                await RespondWithError(context, StatusCodes.Status401Unauthorized, MissingHeadersError);
                return;
            }

            var dto = await ParseRequestBody<CreateOrderDto>(context);
            if (dto == null || dto.CompanyId == Guid.Empty)
            {
                await RespondWithError(context, StatusCodes.Status400BadRequest, InvalidCompanyIdError);
                return;
            }

            // Use a hashed cache key for security
            var cacheKey = GetHashedCacheKey(apiKey, apiSecret, dto.CompanyId.ToString());

            // Check if the request is already cached
            if (!_cache.TryGetValue(cacheKey, out bool isValid) || !isValid)
            {
                // Validate with the identity service
                isValid = await ValidateWithIdentityService(apiKey, apiSecret, dto.CompanyId, context);
                if (isValid)
                {
                    // Cache only if the validation is successful
                    _cache.Set(cacheKey, true, TimeSpan.FromMinutes(CacheDurationMinutes));
                }
                else
                {
                    await RespondWithError(context, StatusCodes.Status401Unauthorized, UnauthorizedError);
                    return;
                }
            }
        }

        // Proceed to the next middleware if it's not CreateOrder or authorization is successful
        await _next(context);
    }

    private bool ValidateHeaders(HttpContext context, out string apiKey, out string apiSecret)
    {
        apiKey = context.Request.Headers["X-Api-Key"];
        apiSecret = context.Request.Headers["X-Api-Secret"];
        return !string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(apiSecret);
    }

    private bool IsCreateOrderRequest(HttpContext context)
    {
        // Check if the request is a POST to /api/order
        return context.Request.Path.StartsWithSegments("/api/order") && context.Request.Method == HttpMethods.Post;
    }

    private async Task<T?> ParseRequestBody<T>(HttpContext context) where T : class
    {
        if (context.Request.ContentType != "application/json")
            return null;

        try
        {
            context.Request.EnableBuffering();
            using var reader = new StreamReader(context.Request.Body, Encoding.UTF8, leaveOpen: true);
            var body = await reader.ReadToEndAsync();
            context.Request.Body.Position = 0;

            return JsonSerializer.Deserialize<T>(body, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (JsonException ex)
        {
            _logger.LogWarning(ex, InvalidJsonError);
            return null;
        }
    }

    private async Task<bool> ValidateWithIdentityService(string apiKey, string apiSecret, Guid companyId,
        HttpContext context)
    {
        var identityServiceUrl = _configuration["IdentityService:ValidateUrl"];
        if (string.IsNullOrWhiteSpace(identityServiceUrl))
        {
            _logger.LogError("IdentityService:ValidateUrl is not configured.");
            await RespondWithError(context, StatusCodes.Status500InternalServerError, InternalServerError);
            return false;
        }

        var client = _httpClientFactory.CreateClient();

        try
        {
            var requestContent = new StringContent(
                JsonSerializer.Serialize(new { ApiKey = apiKey, ApiSecret = apiSecret }),
                Encoding.UTF8,
                "application/json"
            );

            var response = await client.PostAsync($"{identityServiceUrl}/Companies/{companyId}", requestContent);

            if (!response.IsSuccessStatusCode) return false;

            var responseBody = await response.Content.ReadAsStringAsync();
            var identityResponse = JsonSerializer.Deserialize<IdentityResponse>(responseBody,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return identityResponse?.ApiKey == apiKey && identityResponse.ApiSecret == apiSecret;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during request to Identity Service");
            await RespondWithError(context, StatusCodes.Status500InternalServerError, InternalServerError);
            return false;
        }
    }

    private async Task RespondWithError(HttpContext context, int statusCode, string errorMessage)
    {
        context.Response.StatusCode = statusCode;
        context.Response.ContentType = "application/json";
        await context.Response.WriteAsJsonAsync(new { error = errorMessage });
    }

    private string GetHashedCacheKey(string apiKey, string apiSecret, string additionalInfo)
    {
        using var sha256 = SHA256.Create();
        var keyBytes = Encoding.UTF8.GetBytes($"{apiKey}:{apiSecret}:{additionalInfo}");
        var hashBytes = sha256.ComputeHash(keyBytes);
        return Convert.ToBase64String(hashBytes);
    }
}﻿using System.Net;
using System.Text.Json;

namespace OrderService.Middleware;

public class ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
{
    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            await next(context);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "An unhandled exception occurred.");
            await HandleExceptionAsync(context, ex);
        }
    }

    private static Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        HttpStatusCode status;
        string message;

        switch (exception)
        {
            case InvalidOperationException _:
                status = HttpStatusCode.BadRequest;
                message = exception.Message;
                break;
            case KeyNotFoundException _:
                status = HttpStatusCode.NotFound;
                message = exception.Message;
                break;
            default:
                status = HttpStatusCode.InternalServerError;
                message = "An unexpected error occurred.";
                break;
        }

        var response = new { error = message };
        var payload = JsonSerializer.Serialize(response);

        context.Response.ContentType = "application/json";
        context.Response.StatusCode = (int)status;

        return context.Response.WriteAsync(payload);
    }
}﻿namespace OrderService.Middleware;

public class IdentityResponse
{
    public Guid Id { get; set; }
    public string Name { get; set; }
    public string ApiKey { get; set; }
    public string ApiSecret { get; set; }
}﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace OrderService.Migrations
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    OrderId = table.Column<Guid>(type: "uuid", nullable: false),
                    CompanyId = table.Column<Guid>(type: "uuid", nullable: false),
                    Amount = table.Column<decimal>(type: "numeric(18,2)", nullable: false),
                    Currency = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: false),
                    Status = table.Column<int>(type: "integer", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.OrderId);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Orders_CompanyId",
                table: "Orders",
                column: "CompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_Status",
                table: "Orders",
                column: "Status");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Orders");
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderService.Data;

#nullable disable

namespace OrderService.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20241018122107_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderService.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Status");

                    b.ToTable("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderService.Data;

#nullable disable

namespace OrderService.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderService.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Status");

                    b.ToTable("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿namespace OrderService.Models;

public class Order(Guid companyId, decimal amount, string currency)
{
    public Guid OrderId { get; private set; } = Guid.NewGuid();
    public Guid CompanyId { get; private set; } = companyId;
    public decimal Amount { get; private set; } = amount;
    public string Currency { get; private set; } = currency;
    public OrderStatus Status { get; set; } = OrderStatus.Created;
    public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;


    public void MarkAsCompleted()
    {
        if (Status != OrderStatus.Created)
            throw new InvalidOperationException("Only orders in Created status can be marked as Completed.");

        Status = OrderStatus.Completed;
    }

    public void MarkAsRejected()
    {
        if (Status != OrderStatus.Created)
            throw new InvalidOperationException("Only orders in Created status can be marked as Rejected.");

        Status = OrderStatus.Rejected;
    }
}﻿namespace OrderService.Models;

public enum OrderStatus
{
    Created,
    Completed,
    Rejected
}// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("1151e7dc-3a92-4c4f-828e-ec95a241f593")]
[assembly: System.Reflection.AssemblyCompanyAttribute("OrderService")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("OrderService")]
[assembly: System.Reflection.AssemblyTitleAttribute("OrderService")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.

﻿using OrderService.Models;

namespace OrderService.Repositories;

public interface IOrderRepository
{
    Task<Order> AddOrderAsync(Order order);
    Task UpdateOrderAsync(Order order);
    Task<IEnumerable<Order>> GetOrdersByCompanyIdAsync(Guid companyId);
    Task<IEnumerable<Order>> GetOrdersByCompanyIdForDateAsync(Guid companyId, DateTime date);
    Task<Order> GetOrderByIdAsync(Guid orderId);
    Task<decimal> GetTotalCompletedOrderAmountForCompanyToday(Guid companyId);
}﻿using Microsoft.EntityFrameworkCore;
using OrderService.Data;
using OrderService.Models;

namespace OrderService.Repositories;

public class OrderRepository(OrderDbContext dbContext, ILogger<OrderRepository> logger) : IOrderRepository
{
    public async Task<Order> AddOrderAsync(Order order)
    {
        await dbContext.Orders.AddAsync(order);
        await dbContext.SaveChangesAsync();
        logger.LogInformation("Added new Order with ID {OrderId}", order.OrderId);
        return order;
    }

    public async Task UpdateOrderAsync(Order order)
    {
        dbContext.Orders.Update(order);
        await dbContext.SaveChangesAsync();
        logger.LogInformation("Updated Order with ID {OrderId} to status {Status}", order.OrderId, order.Status);
    }

    public async Task<IEnumerable<Order>> GetOrdersByCompanyIdAsync(Guid companyId)
    {
        return await dbContext.Orders
            .AsNoTracking()
            .Where(o => o.CompanyId == companyId)
            .ToListAsync();
    }

    public async Task<IEnumerable<Order>> GetOrdersByCompanyIdForDateAsync(Guid companyId, DateTime date)
    {
        var startDate = date.Date;
        var endDate = startDate.AddDays(1);

        return await dbContext.Orders
            .AsNoTracking()
            .Where(o => o.CompanyId == companyId && o.CreatedAt >= startDate && o.CreatedAt < endDate)
            .ToListAsync();
    }

    public async Task<Order> GetOrderByIdAsync(Guid orderId)
    {
        return await dbContext.Orders
            .AsNoTracking()
            .FirstOrDefaultAsync(o => o.OrderId == orderId);
    }

    public async Task<decimal> GetTotalCompletedOrderAmountForCompanyToday(Guid companyId)
    {
        var today = DateTime.UtcNow.Date;
        var tomorrow = today.AddDays(1);

        return await dbContext.Orders
            .Where(o => o.CompanyId == companyId && o.CreatedAt >= today && o.CreatedAt < tomorrow &&
                        o.Status == OrderStatus.Completed)
            .SumAsync(o => o.Amount);
    }
}﻿using OrderService.Models;

namespace OrderService.Services;

public interface IOrderService
{
    Task<Order> CreateOrderAsync(Guid companyId, decimal amount, string currency);
    Task<IEnumerable<Order>> GetOrdersByCompanyIdAsync(Guid companyId);
    Task<decimal> ComputeTotalOrdersAsync(Guid companyId);
    Task<Order> GetOrderByIdAsync(Guid orderId);
}﻿using MassTransit;
using OrderService.Models;
using OrderService.Repositories;
using Shared.Events.Order;

namespace OrderService.Services;

public class OrderService(
    IOrderRepository orderRepository,
    IPublishEndpoint publishEndpoint,
    ILogger<IOrderService> logger) : IOrderService
{
    private const decimal DailyLimit = 10000m;

    public async Task<Order> CreateOrderAsync(Guid companyId, decimal amount, string currency)
    {
        // Validate daily order limit
        var totalAmountToday = await orderRepository.GetTotalCompletedOrderAmountForCompanyToday(companyId);

        if (totalAmountToday + amount > DailyLimit)
        {
            logger.LogWarning(
                "Daily limit exceeded for CompanyId: {CompanyId}. Current Total: {TotalAmountToday}, Attempted Amount: {Amount}",
                companyId, totalAmountToday, amount);
            throw new InvalidOperationException($"Daily limit of {DailyLimit} exceeded for company {companyId}");
        }

        var order = new Order(companyId, amount, currency);

        var savedOrder = await orderRepository.AddOrderAsync(order);

        // Publish the event to notify the Payment Processing Service
        var orderCreatedEvent =
            new OrderCreatedEvent(savedOrder.OrderId, companyId, amount, currency, nameof(OrderService));
        await publishEndpoint.Publish(orderCreatedEvent);

        logger.LogInformation("Order {OrderId} created and OrderCreatedEvent published.", savedOrder.OrderId);

        return savedOrder;
    }

    public async Task<IEnumerable<Order>> GetOrdersByCompanyIdAsync(Guid companyId)
    {
        logger.LogInformation("Fetching orders for CompanyId: {CompanyId}", companyId);
        return await orderRepository.GetOrdersByCompanyIdAsync(companyId);
    }

    public async Task<decimal> ComputeTotalOrdersAsync(Guid companyId)
    {
        logger.LogInformation("Computing total completed orders for CompanyId: {CompanyId}", companyId);
        return await orderRepository.GetTotalCompletedOrderAmountForCompanyToday(companyId);
    }

    public async Task<Order> GetOrderByIdAsync(Guid orderId)
    {
        logger.LogInformation("Fetching Order with ID: {OrderId}", orderId);
        return await orderRepository.GetOrderByIdAsync(orderId);
    }
}